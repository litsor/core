# OauthCreateToken

# Script parameters:
# /client/id
# /user/id
# /scope
# Output:
# /token/token
# /token/expires
# /token/refresh_token

/config = {} script "OauthConfig"
/now = timestamp date {}

/expires = /now + 43200

/payload = {
  aud: /client/id,
  sub: /user/id,
  scope: /scope,
  exp: /expires,
  jti: secureToken 8,
  iat: timestamp date {}
}
/token = [
  json {
    alg: "HS256",
    typ: "JWT"
  },
  json /payload
]
/access_token = (/token map base64url /item) join "."
/access_token = /access_token + "." + base64urlFromBase64 signature /access_token

/token/exp = /now + /config/rememberExpire
# Confidential clients (often API integrations) must use the refresh token within 30 days.
/ = (/client/type == "confidential") then {{
  /payload/exp = /now + /config/refreshTokenExpire
  /token = [
    json {
      alg: "HS256",
      typ: "JWT"
    },
    json /payload
  ]
}}
/refresh_token = (/token map base64url /item) join "."
/refresh_token = /refresh_token + "." + base64urlFromBase64 signature /refresh_token

# Add refresh token for confidential clients.
/ = (/client/type == "confidential") then {{
  /token/refresh_token = /refresh_token/token
}}

/ = {
  token: /access_token,
  expires: /expires,
  refresh_token: /refresh_token
}
