# OauthToken

/now = timestamp date {}

/client = query {
  item: OauthClient(id: /client_id) {
    id
    secret
    type
    trusted
  }
} pick /item

/ = (/client/type == "confidential") then {{
  # Check the client authorization.
  # This can be done via HTTP basic authentication or the client_secret field.
  /allow = (/headers/authorization == ("Basic " + base64 /client/id + ":" + /client/secret)) or /client_secret == /client/secret
  (!/allow) then error {type: "Unauthorized"}
}}

/data/status = 400

/ = (/grant_type == "authorization_code") then {{
  /code = /code regexp "^([^.]+)\\.([^.]+)\\.([^.]+)$"
  /valid = /code and /code/3 == base64urlFromBase64 signature /code/1 + "." + /code/2
  / = /valid then {{
    /payload = fromJson fromBase64url /code/2
    /valid = (/payload/exp > /now) and (/payload/aud == /client/id)
  }}

  / = /valid then {{
    # Create a new access token.
    /token = {
      client: /client,
      user: {id: /payload/sub},
      scope: /payload/scope
    } script "OauthCreateToken"

    /data/body = {
      access_token: /token/token,
      token_type: "bearer",
      user_id: /payload/sub,
      expires_in: /token/expires - /now
    }
    / = /token/refresh_token then {{
      /data/body/refresh_token = /token/refresh_token
    }}
  }}

  /data/status = 200
}}

/ = (/grant_type == "refresh_token") then {{

  /parts = /refresh_token regexp "^([^.]+)\\.([^.]+)\\.([^.]+)$"
  /valid = /parts and /parts/3 == base64urlFromBase64 signature /parts/1 + "." + /parts/2
  / = /valid then {{
    /payload = fromJson fromBase64url /parts/2
    /valid = (/payload/exp > timestamp date {}) and (/payload/aud == /client/id)
    /revoked = query {
      list: listOauthRevokedToken(filters: {
        tokenHash: /refresh_token hash "sha1"
      }) {
        count
      }
    } pick /list/count
    /valid = /valid and (!/revoked)
    /loggedout = query {
      list: listOauthLogout(filters: {
        aud: /payload/aud,
        sub: /payload/sub,
        date_lte: /payload/iat
      }) {
        count
      }
    } pick /list/count
    /valid = /valid and (!/loggedout)
  }}

  / = /valid then {{
    # Revoke refresh token.
    mutation {
      createOauthRevokedToken(input: {
        tokenHash: /refresh_token hash "sha1",
        expires: /payload/exp
      }) { id }
    }
    # Create a new access token.
    /token = {
      client: /client,
      user: {id: /payload/sub},
      scope: /payload/scope
    } script "OauthCreateToken"
    /data/body = {
      access_token: /token/token,
      token_type: "bearer",
      user_id: /payload/sub,
      expires_in: /token/expires - /now
    }
    /data/body/refresh_token = /token/refresh_token
    /data/status = 200
  }}
}}

/ = ((/grant_type == "password") and /client/trusted) then {{
  /user = query {
    listUser(filters: {
      name: /username,
      blocked: false
    }) {
      items {
        id
        password
        scope
      }
    }
  } pick /listUser/items/0
  /data/status = 401
  /validPassword = /user/password validatePassword /password
  / = /validPassword then {{
    /scope ~ "*"
    /scope = /scope scopeIntersection /user/scope
    /token = {
      client: /client,
      user: /user,
      scope: /scope
    } script "OauthCreateToken"
    /data/body = {
      access_token: /token/token,
      token_type: "bearer",
      user_id: /token/user,
      expires_in: /token/expires - /now,
      refresh_token: /token/refresh_token
    }
    /data/status = 200
  }}
}}

# Set security related headers.
/"data/headers/Cache-Control" = "no-store"
/data/headers/Pragma = "no-cache"

/ = /data
